#!/usr/bin/env python
"""
Script de test pour v√©rifier l'utilisation des m√©tadonn√©es dans les r√©ponses de l'API.
Ce script pose une question et analyse la fa√ßon dont les sources sont cit√©es dans la r√©ponse.
"""

import requests
import json
import time
import sys
import os
import re
from pprint import pprint

# Configuration
API_URL = "http://localhost:8000/ask"  # URL de l'API locale

def extract_citations(text):
    """Extrait les citations de sources dans le texte"""
    # Diff√©rents patterns pour extraire les r√©f√©rences
    cgi_pattern = r"Article\s+([^,\s]+)\s+du\s+Code\s+G√©n√©ral\s+des\s+Imp√¥ts"
    bofip_pattern = r"(TVA\s+-\s+[^(]+)\s+\(BOFIP\s+du\s+([^)]+)\)"
    bareme_pattern = r"(BAREME\s+-\s+[^(]+)\s+\(Bar√®me\s+du\s+([^)]+)\)"
    
    # Recherche des citations
    cgi_refs = re.findall(cgi_pattern, text, re.IGNORECASE)
    bofip_refs = re.findall(bofip_pattern, text, re.IGNORECASE)
    bareme_refs = re.findall(bareme_pattern, text, re.IGNORECASE)
    
    # Combinaison des r√©sultats
    all_refs = {
        "CGI": cgi_refs,
        "BOFIP": bofip_refs,
        "BAREME": bareme_refs
    }
    
    return all_refs

def test_meta_citations(question):
    """
    Teste si l'API utilise correctement les m√©tadonn√©es dans ses r√©ponses.
    
    Args:
        question (str): La question √† poser
    """
    payload = {
        "question": question,
        "include_metadata": True
    }
    
    print(f"\nüîç Envoi de la question: '{question}'")
    start_time = time.time()
    
    try:
        response = requests.post(API_URL, json=payload)
        
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è  Temps de r√©ponse: {elapsed:.2f} secondes")
        
        if response.status_code == 200:
            result = response.json()
            
            # Analyse des citations dans la r√©ponse
            answer = result.get("answer", "")
            reasoning = result.get("reasoning", "")
            
            # Extraction et affichage des citations
            answer_citations = extract_citations(answer)
            reasoning_citations = extract_citations(reasoning)
            
            # Affichage des r√©sultats
            print("\n==== ANALYSE DES CITATIONS DANS LA R√âPONSE ====")
            print("\nüìù R√âPONSE:")
            print("-" * 80)
            print(answer)
            print("-" * 80)
            
            print("\nüìä Citations d√©tect√©es dans la r√©ponse:")
            for source_type, refs in answer_citations.items():
                if refs:
                    print(f"  {source_type}: {', '.join(ref for ref in refs if ref)}")
            
            if not any(refs for refs in answer_citations.values()):
                print("  ‚ùå Aucune citation d√©tect√©e - Le mod√®le utilise probablement encore les num√©ros de documents")
            
            # V√©rification de l'utilisation des num√©ros de documents
            if re.search(r"Document\s+\d+", answer):
                print("  ‚ö†Ô∏è La r√©ponse contient encore des r√©f√©rences par num√©ro de document")
            
            # V√©rification des m√©tadonn√©es
            print("\nüîé M√âTADONN√âES DES SOURCES:")
            if 'sources' in result and result['sources']:
                for i, source in enumerate(result['sources'][:3]):  # Limiter √† 3 sources pour la lisibilit√©
                    print(f"\n[Source {i+1}]")
                    if isinstance(source, dict):
                        # Afficher l'origine du document
                        if 'metadata' in source:
                            meta = source['metadata']
                            if 'source' in meta:
                                print(f"Source: {meta['source']}")
                            
                            # Afficher les m√©tadonn√©es cl√©s
                            key_metadata = ['title', 'title_head', 'title_xml', 'section', 'date']
                            for key in key_metadata:
                                if key in meta:
                                    print(f"{key}: {meta[key]}")
            else:
                print("‚ùå Aucune m√©tadonn√©e disponible dans la r√©ponse")
            
            # Enregistrement de la r√©ponse pour analyse
            with open("meta_response_analysis.json", "w", encoding="utf-8") as f:
                json.dump({
                    "answer": answer,
                    "answer_citations": answer_citations,
                    "reasoning": reasoning,
                    "reasoning_citations": reasoning_citations,
                    "sources": result.get("sources", [])
                }, f, ensure_ascii=False, indent=2)
            
            print("\nüíæ Analyse compl√®te enregistr√©e dans 'meta_response_analysis.json'")
            
            return result
        else:
            print(f"\n‚ùå Erreur: Code {response.status_code}")
            print(response.text)
            return None
    
    except Exception as e:
        print(f"\n‚ùå Exception: {str(e)}")
        return None

if __name__ == "__main__":
    # Si une question est pass√©e en argument, utiliser celle-ci
    if len(sys.argv) > 1:
        question = " ".join(sys.argv[1:])
    else:
        # Sinon utiliser une question par d√©faut
        question = "Comment fonctionne la TVA en France?"
    
    result = test_meta_citations(question)
    
    print("\n‚ú® CONSEIL:")
    print("Pour obtenir une r√©ponse avec des citations de m√©tadonn√©es, ex√©cutez:")
    print(f"python {os.path.basename(__file__)} \"Votre question pr√©cise sur la TVA ici\"")
    print("\nV√©rifiez que l'API ne r√©pond plus en utilisant 'Document X' mais avec les m√©tadonn√©es r√©elles!") 