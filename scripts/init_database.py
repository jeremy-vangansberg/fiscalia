#!/usr/bin/env python3
import sys
import mysql.connector
from pathlib import Path

# Ajouter le chemin du projet au PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from src.config.settings import settings

def test_mysql_connection():
    """
    Teste la connexion √† MySQL et affiche les informations de d√©bogage.
    """
    print("\nüîç Test de la connexion MySQL...")
    print(f"  Host: {settings.DB_HOST}")
    print(f"  Port: {settings.DB_PORT}")
    print(f"  User: {settings.DB_USER}")
    
    try:
        # Test de connexion simple
        conn = mysql.connector.connect(
            host=settings.DB_HOST,
            port=settings.DB_PORT,
            user=settings.DB_USER,
            password=settings.DB_PASSWORD
        )
        
        cursor = conn.cursor()
        
        # V√©rifier la version de MySQL
        cursor.execute("SELECT VERSION()")
        version = cursor.fetchone()[0]
        print(f"‚úÖ Connexion r√©ussie √† MySQL version: {version}")
        
        # Lister les bases de donn√©es existantes
        cursor.execute("SHOW DATABASES")
        databases = [db[0] for db in cursor.fetchall()]
        print("\nüìÅ Bases de donn√©es existantes:")
        for db in databases:
            print(f"  - {db}")
            
        cursor.close()
        conn.close()
        return True
        
    except mysql.connector.Error as err:
        print(f"\n‚ùå Erreur de connexion MySQL: {err}")
        print("\nüîç Diagnostic:")
        if err.errno == 2003:
            print("  ‚Üí MySQL n'est pas en cours d'ex√©cution ou le port est incorrect")
            print("  ‚Üí V√©rifiez que MySQL est d√©marr√©:")
            print("    - Sur macOS: brew services list")
            print("    - Sur Linux: sudo systemctl status mysql")
        elif err.errno == 1045:
            print("  ‚Üí Les identifiants de connexion sont incorrects")
            print("  ‚Üí V√©rifiez que l'utilisateur existe et a le bon mot de passe:")
            print("    mysql -u root -p")
            print("    SELECT User, Host FROM mysql.user;")
        return False

def create_database():
    """
    Cr√©e la base de donn√©es si elle n'existe pas d√©j√†.
    Configure √©galement les param√®tres n√©cessaires comme l'encodage UTF-8.
    """
    if not test_mysql_connection():
        sys.exit(1)
        
    try:
        # Connexion √† MySQL sans sp√©cifier de base de donn√©es
        conn = mysql.connector.connect(
            host=settings.DB_HOST,
            port=settings.DB_PORT,
            user=settings.DB_USER,
            password=settings.DB_PASSWORD
        )
        
        cursor = conn.cursor()
        
        # Cr√©ation de la base de donn√©es avec le bon encodage
        cursor.execute(f"""
            CREATE DATABASE IF NOT EXISTS {settings.DB_NAME}
            CHARACTER SET utf8mb4
            COLLATE utf8mb4_unicode_ci
        """)
        
        print(f"‚úÖ Base de donn√©es '{settings.DB_NAME}' cr√©√©e avec succ√®s")
        
        cursor.close()
        conn.close()
        
    except mysql.connector.Error as err:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es : {err}")
        print("\nüí° Assurez-vous que :")
        print("  1. MySQL est install√© et en cours d'ex√©cution")
        print("  2. Les informations de connexion dans .env sont correctes")
        print("  3. L'utilisateur a les droits suffisants pour cr√©er une base de donn√©es")
        sys.exit(1)

def init_tables():
    """
    Initialise les tables de la base de donn√©es via SQLModel.
    """
    try:
        from src.config.database import init_db
        init_db()
        print("‚úÖ Tables cr√©√©es avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables : {e}")
        sys.exit(1)

def main():
    """
    Script principal d'initialisation de la base de donn√©es.
    """
    print("üöÄ Initialisation de la base de donn√©es...")
    
    # 1. Cr√©ation de la base de donn√©es
    create_database()
    
    # 2. Cr√©ation des tables via SQLModel
    init_tables()
    
    print("‚ú® Initialisation de la base de donn√©es termin√©e avec succ√®s !")

if __name__ == "__main__":
    main() 